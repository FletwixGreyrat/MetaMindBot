import openai
from sqlalchemy import delete, select
from fsm import *   
import httpx
from os import getenv
from config import settings
from keyboards import *
from models import *
from asyncio import sleep
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv, find_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.redis import RedisStorage2


storage = RedisStorage2(host='localhost', port=6379, db=5)
proxy_url = "http://3.126.147.182:80"

openai.aiosession.set(httpx.AsyncClient(proxy=proxy_url))
openai.api_key = settings.openai.token 
engine = create_async_engine(url=settings.db.url, echo=settings.db.echo)

session_factory = async_sessionmaker(
        bind=engine,
        autoflush=False,
        autocommit=False,
        expire_on_commit=False
)

bot: Bot = Bot(token=settings.bot.token)
dp: Dispatcher = Dispatcher(bot=bot, storage=storage)

@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await message.answer("–ø–æ–ø–∞")
    await message.answer("""
–ü—Ä–∏–≤–µ—Ç! –Ø, MetaMindBot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ü–µ–ª—å—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –≤–∫–ª—é—á–∞—è –æ—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è (—Ä–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–±—É—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤. –ú–µ–Ω—è –∑–æ–≤—É—Ç MetaMindBot ü§ñ\n\n"
"üîπ –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∞ –ï–ª–µ–Ω–∞ –ó–∞–ø–æ–¥–æ–π–Ω–∏–∫–æ–≤–∞, –ø—Å–∏—Ö–æ–ª–æ–≥, –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥, —Å–≤–æ–±–æ–¥–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –∞—Å–ø–∏—Ä–∞–Ω—Ç-—ç–∫—Å—Ç–µ—Ä–Ω, "
"–∞–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ö—É–ª—å—Ç—É—Ä–∞ –ò–ò: —É–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ¬ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ —É—á–∏—Ç—å—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
"—Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.  –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –µ—ë –∫–∞–Ω–∞–ª: @eduneuro2025\n\n"
"üìå –í–∞–∂–Ω–æ: –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ú–µ—Ç–æ–¥–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π, –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. "
"üîπ –°–æ –º–Ω–æ–π —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è:\n"
"üîπ ‚Äî –†–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å\n"
"üîπ ‚Äî –£–ª—É—á—à–∞—Ç—å —É—á–µ–±–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
"üîπ ‚Äî –†–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å\n"
"üîπ ‚Äî –†–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ\n"
"üîπ ‚Äî –ì–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞\n"
"üîπ ‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
"üîπ ‚Äî –ü—Ä–∏–º–µ–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞\n\n"
"üî• –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! üî•"
    )
–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?
1.	–ü—Ä–æ–π–¥–∏ –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã.
2.	–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
3.	–°–ª–µ–¥—É–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É (3 –∑–∞–Ω—è—Ç–∏—è –≤ –Ω–µ–¥–µ–ª—é): 
o	–ú–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (/train)
o	–¢—Ä–µ–Ω–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (üß† InfoTraining)
o	–†–µ—Ñ–ª–µ–∫—Å–∏—è (/reflect)
o	–ü–æ–º–æ–¥–æ—Ä–æ-—Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (/pomodoro)
4.	–ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (/retest).
5.	–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–¥–µ—Ä–∂–∫—É: 
o	–ï—Å–ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —á–∞—Ç (/psych_chat).
6.	–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –±–æ–Ω—É—Å—ã! 
o	–ß–µ–º –∞–∫—Ç–∏–≤–Ω–µ–µ —Ç—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (/achievements) —Ç—ã –ø–æ–ª—É—á–∏—à—å!
üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–∏ –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.""", reply_markup=start_keyboard())


@dp.message_handler(commands="help")
async def help_cmd(message: types.Message):
    await message.answer("""üìå –ü–æ–º–æ—â—å –ø–æ MetaMindBot

–ü—Ä–∏–≤–µ—Ç! üëã –Ø **MetaMindBot**, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ **–º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤**. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å –ø–∞–º—è—Ç—å, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é.  

–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:  

**üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å**  
üîπ **/test** ‚Äì –ü—Ä–æ–π—Ç–∏ –≤—Ö–æ–¥–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.  
üîπ **/retest** ‚Äì –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞.  
üîπ **/progress** ‚Äì –û—Ü–µ–Ω–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–≤—ã–∫–æ–≤.  

**üß† –û–±—É—á–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**  
üîπ **/reflect** ‚Äì –†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è (–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—Ö–æ–≤ –∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π).  
üîπ **/train** ‚Äì –ú–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞, –≤–Ω–∏–º–∞–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å).  
üîπ **/info_training** ‚Äì –¢—Ä–µ–Ω–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö).  
üîπ **/quiz** ‚Äì –ö–≤–∏–∑—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.  
üîπ **/courses** ‚Äì –ü–æ–¥–±–æ—Ä–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–æ–≤.  

**üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**  
üîπ **/psych_chat** ‚Äì –ß–∞—Ç —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º (–ò–ò –ø–æ–º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º).  
üîπ **/pomodoro** ‚Äì Pomodoro-—Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —É—á–µ–±—ã.  
üîπ **/reminders** ‚Äì –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –∏ –∑–∞–Ω—è—Ç–∏—è—Ö.  


**üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã**  
üîπ **/resources** ‚Äì –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.  

üìå **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è **/test**, –ø—Ä–æ—Ö–æ–¥–∏ **—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é**, –∏—Å–ø–æ–ª—å–∑—É–π **Pomodoro-—Ç–∞–π–º–µ—Ä** –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π **—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å**!  

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ! üöÄ""")


@dp.callback_query_handler(text="start_test")
async def start_test_callback_cmd(call: types.CallbackQuery):
    await call.message.edit_text("""–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
""", reply_markup=auth_code())


@dp.callback_query_handler(text="auth_code")
async def auth_code_callback_command(call: types.CallbackQuery):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
    await Auth.code.set()


@dp.message_handler(commands="pomodoro")
async def pomodoro_CMD(message: types.Message):
    async with session_factory() as session:
        stmt = select(PomodoroUser).where(PomodoroUser.user_id == message.from_user.id)
        user = await session.execute(statement=stmt)
        user = user.scalar()
        await session.commit()
    print(user)
    if user is not None:
        print(1)
        async with session_factory() as session:
            stmt = delete(PomodoroUser).where(PomodoroUser.user_id == message.from_user.id)
            await session.execute(statement=stmt)
            await session.commit()
            return
    if user is None:
        async with session_factory() as session:
            stmt = insert(PomodoroUser).values(user_id=message.from_user.id)
            user = await session.execute(statement=stmt)
            await session.commit()
        while True:
            await message.answer("Start1")
            await sleep(5) #TODO 20 * 60
            async with session_factory() as session:
                stmt = select(PomodoroUser).where(PomodoroUser.user_id == message.from_user.id)
                user = await session.execute(statement=stmt)
                user = user.scalar()
            if user is None:
                print("3")
                return
            
            await message.answer("Start2")
            await sleep(2) #TODO 5 * 60

            async with session_factory() as session:
                stmt = select(PomodoroUser).where(PomodoroUser.user_id == message.from_user.id)
                user = await session.execute(statement=stmt)
                user = user.scalar()
            if user is None:
                print("2")
                return


# @dp.message_handler(commands="train")
# async def train_CMD(message: types.Message):
#     await message.answer("""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!
# –ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ  —ç—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–∏–≤–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–∞–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: –æ—Å–æ–∑–Ω–∞–Ω–∏–µ –º—ã—à–ª–µ–Ω–∏—è, —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–∞–º—è—Ç–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ.
# –í—ã–ø–æ–ª–Ω—è–π –∏—Ö 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 3 –º–µ—Å—è—Ü–µ–≤ –∏ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–∞–∫ –ø—Ä–æ–∫–∞—á–∏–≤–∞—é—Ç—Å—è —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑ –∑–∞ —Ä–∞–∑–æ–º""",)












































import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from sqlalchemy.orm import sessionmaker


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ExerciseStates(StatesGroup):
    waiting_for_answer1 = State()
    waiting_for_answer2 = State()
    waiting_for_answer3 = State()
    waiting_for_answer4 = State()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤)
def is_valid_answer(text):
    return len(text.split()) >= 6

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['train'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '–≠–∫–∑–∞–º–µ–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è'.\n"
        "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —Ç—ã –æ—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤)."
    )
    await ask_question1(message)

# –í–æ–ø—Ä–æ—Å 1
async def ask_question1(message: types.Message):
    await message.answer("1Ô∏è‚É£ –ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ? (–Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤)")
    await ExerciseStates.waiting_for_answer1.set()

@dp.message_handler(state=ExerciseStates.waiting_for_answer1)
async def process_answer1(message: types.Message, state: FSMContext):
    if not is_valid_answer(message.text):
        await message.answer("–ù–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤")
        return

    await state.update_data(answer1=message.text)
    await message.answer("‚úÖ –•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.")
    await ask_question2(message)

# –í–æ–ø—Ä–æ—Å 2
async def ask_question2(message: types.Message):
    await message.answer("2Ô∏è‚É£ –ö–∞–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –µ—Å—Ç—å? –ö–∞–∫ —Ç—ã —ç—Ç–æ –ø–æ–Ω—è–ª?")
    await ExerciseStates.waiting_for_answer2.set()

@dp.message_handler(state=ExerciseStates.waiting_for_answer2)
async def process_answer2(message: types.Message, state: FSMContext):
    if not is_valid_answer(message.text):
        await message.answer("–ù–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤")
        return

    await state.update_data(answer2=message.text)
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.")
    await ask_question3(message)

# –í–æ–ø—Ä–æ—Å 3
async def ask_question3(message: types.Message):
    await message.answer("3Ô∏è‚É£ –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å? –ö–∞–∫–∏–µ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç?")
    await ExerciseStates.waiting_for_answer3.set()

@dp.message_handler(state=ExerciseStates.waiting_for_answer3)
async def process_answer3(message: types.Message, state: FSMContext):
    if not is_valid_answer(message.text):
        await message.answer("–ù–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤")
        return

    await state.update_data(answer3=message.text)
    await message.answer("‚úÖ –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.")
    await ask_question4(message)

# –í–æ–ø—Ä–æ—Å 4
async def ask_question4(message: types.Message):
    await message.answer("4Ô∏è‚É£ –ö–∞–∫ —Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—à—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É?")
    await ExerciseStates.waiting_for_answer4.set()

@dp.message_handler(state=ExerciseStates.waiting_for_answer4)
async def process_answer4(message: types.Message, state: FSMContext):
    if not is_valid_answer(message.text):
        await message.answer("–ù–∞–ø–∏—à–∏ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –º–µ–Ω–µ–µ 6 —Å–ª–æ–≤")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ –ë–î
    user_data = await state.get_data()
    async with session_factory as session:
        session.add(UserAnswer(
            user_id=message.from_user.id,
            answer1=user_data["answer1"],
            answer2=user_data["answer2"],
            answer3=user_data["answer3"],
            answer4=message.text
        ))
        session.commit()
        session.close()

    await message.answer(
        "‚úÖ –¢—ã –º–æ–ª–æ–¥–µ—Ü! –û—Ç–ª–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "üìå –°–æ–≤–µ—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:\n"
        "‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã, –∑–∞—Ç–µ–º –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–π —Å–ª–æ–∂–Ω—ã–µ.\n"
        "‚Ä¢ –°–¥–µ–ª–∞–π —Ç–µ—Å—Ç –Ω–∞ —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        "‚Ä¢ –ß–µ—Ä–µ–∑ –¥–µ–Ω—å –æ—Ü–µ–Ω–∏, —á—Ç–æ –∑–∞–ø–æ–º–Ω–∏–ª, –ø–æ–≤—Ç–æ—Ä–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞.\n\n"
        "üìÖ –í—ã–ø–æ–ª–Ω—è–π —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é!"
    )
    await state.finish()













































if __name__ == "__main__":
    executor.start_polling(skip_updates=True, dispatcher=dp)